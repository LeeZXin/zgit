package git

import (
	"fmt"
	"os"
	"path/filepath"
	"zgit/setting"
	"zgit/util"
)

const (
	ScriptType = "bash"
)

func preReceiveHook() string {
	return fmt.Sprintf(`#!/usr/bin/env %s
# AUTO GENERATED BY ZGIT, DO NOT MODIFY
data=$(cat)
echo "${data}" | "%s hook pre-receive"
exit $?
`, ScriptType, util.ShellEscape(setting.AppPath()))
}

func updateHook() string {
	return fmt.Sprintf(`#!/usr/bin/env %s
# AUTO GENERATED BY ZGIT, DO NOT MODIFY
%s hook update $1 $2 $3
exit $?
`, ScriptType, util.ShellEscape(setting.AppPath()))
}

func postReceiveHook() string {
	return fmt.Sprintf(`#!/usr/bin/env %s
# AUTO GENERATED BY ZGIT, DO NOT MODIFY
data=$(cat)
echo "${data}" | "%s hook post-receive"
exit $?
`, ScriptType, util.ShellEscape(setting.AppPath()))
}

func procReceiveHook() string {
	return fmt.Sprintf(`#!/usr/bin/env %s
# AUTO GENERATED BY ZGIT, DO NOT MODIFY
%s hook proc-receive
exit $?
`, ScriptType, util.ShellEscape(setting.AppPath()))
}

func InitRepoHook(repoPath string) error {
	hookDir := filepath.Join(repoPath, "hooks")
	hook := preReceiveHook()
	if err := writeHookFile(filepath.Join(hookDir, "pre-receive"), []byte(hook)); err != nil {
		return fmt.Errorf("init pre-receive hook file failed: %v", err)
	}
	hook = updateHook()
	if err := writeHookFile(filepath.Join(hookDir, "update"), []byte(hook)); err != nil {
		return fmt.Errorf("init update hook file failed: %v", err)
	}
	hook = postReceiveHook()
	if err := writeHookFile(filepath.Join(hookDir, "post-receive"), []byte(hook)); err != nil {
		return fmt.Errorf("init post-receive hook file failed: %v", err)
	}
	if SupportProcReceive {
		hook = procReceiveHook()
		if err := writeHookFile(filepath.Join(hookDir, "proc-receive"), []byte(hook)); err != nil {
			return fmt.Errorf("init proc-receive hook file failed: %v", err)
		}
	}
	return nil
}

func writeHookFile(filePath string, content []byte) error {
	if err := util.RemoveAll(filePath); err != nil && !os.IsNotExist(err) {
		return err
	}
	if err := os.WriteFile(filePath, content, 0o777); err != nil {
		return err
	}
	return ensureExecutable(filePath)
}

func ensureExecutable(filePath string) error {
	fileInfo, err := os.Stat(filePath)
	if err != nil {
		return err
	}
	if (fileInfo.Mode() & 0o100) > 0 {
		return nil
	}
	mode := fileInfo.Mode() | 0o100
	return os.Chmod(filePath, mode)
}
